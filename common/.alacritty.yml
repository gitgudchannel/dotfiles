font:
  normal:
    family: TerminessTTF Nerd Font
    style: Regular

  bold:
    family: TerminessTTF Nerd Font
    style: Bold

  italic:
    family: TerminessTTF Nerd Font
    style: Italic

  bold_italic:
    family: TerminessTTF Nerd Font
    style: Bold Italic

  size: 11

colors:
  # Default colors
  primary:
    # hard contrast: background = '#1d2021'
    background: '#282828'
    # soft contrast: background = '#32302f'
    foreground: '#ebdbb2'

  # Normal colors
  normal:
    black:   '#282828'
    red:     '#cc241d'
    green:   '#98971a'
    yellow:  '#d79921'
    blue:    '#458588'
    magenta: '#b16286'
    cyan:    '#689d6a'
    white:   '#a89984'

  # Bright colors
  bright:
    black:   '#928374'
    red:     '#fb4934'
    green:   '#b8bb26'
    yellow:  '#fabd2f'
    blue:    '#83a598'
    magenta: '#d3869b'
    cyan:    '#8ec07c'
    white:   '#ebdbb2'

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  # (macos bindings)
  - { key: N,      mods: Command,         action: SpawnNewInstance       }
  - { key: Key0,   mods: Command,         action: ResetFontSize          }
  - { key: Equals, mods: Command,         action: IncreaseFontSize       }
  - { key: Add,    mods: Command,         action: IncreaseFontSize       }
  - { key: Subtract,mods: Command,         action: DecreaseFontSize       }
  - { key: K,      mods: Command,         action: ClearHistory           }
  - { key: K,      mods: Command,         chars: "\x0c"                  }
  - { key: V,      mods: Command,         action: Paste                  }
  - { key: C,      mods: Command,         action: Copy                   }
  - { key: H,      mods: Command,         action: Hide                   }
  - { key: Q,      mods: Command,         action: Quit                   }
  - { key: W,      mods: Command,         action: Quit                   }

  # (common bindings)
  - { key: Paste,                    action: Paste                      }
  - { key: Copy,                     action: Copy                       }
  - { key: L,         mods: Control, action: ClearLogNotice             }
  - { key: L,         mods: Control, chars: "\x0c"                      }
  - { key: PageUp,    mods: Shift,   action: ScrollPageUp,   mode: ~Alt }
  - { key: PageDown,  mods: Shift,   action: ScrollPageDown, mode: ~Alt }
  - { key: Home,      mods: Shift,   action: ScrollToTop,    mode: ~Alt }
  - { key: End,       mods: Shift,   action: ScrollToBottom, mode: ~Alt }
